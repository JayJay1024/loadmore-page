{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["refApp","React","createRef","imgsIndex","i","push","App","useState","imgsDisplayingIndex","setImgsDisplayingIndex","useEffect","imgsTmp","imgLines","current","clientHeight","Math","ceil","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAUA,I,kDAJMA,G,MAASC,IAAMC,aAGfC,EAAY,GACTC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAUE,KAAKD,GA4DFE,MAzDf,WAAgB,IAAD,EACyCC,mBAAmB,IAD5D,mBACNC,EADM,KACeC,EADf,KAuBbC,qBAAU,WAIR,IAJe,IAAD,IACRC,EAAU,GAEVC,GAAW,UAAAZ,EAAOa,eAAP,eAAgBC,cAAeC,KAAKC,MAAK,UAAAhB,EAAOa,eAAP,eAAgBC,cApCzD,KAoCwF,EAChGV,EAAI,EAAGA,EAAIQ,EAAUR,IAC5BO,EAAQN,KAAKD,GAGfK,EAAuBE,KACtB,IAGoBH,EAAoBS,OAASd,EAAUc,QCrC5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7614b956.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst countPerMore = 6;    // 每次loadmore显示的数量\nconst heightPerImg = 200;  // 每个img高度，在css中设置\n\nconst refApp = React.createRef<HTMLDivElement>();\n\n// 假设拥有的图片数\nconst imgsIndex = [];\nfor (let i = 0; i < 30; i++) {\n  imgsIndex.push(i);\n}\n\nfunction App() {\n  const [imgsDisplayingIndex, setImgsDisplayingIndex] = useState<number[]>([]);  // 显示中的img\n\n  // 这里是下拉自动刷新，也可以使用 loadMoreButton 的方式\n  const handleScroll = () => {\n    // const clientHeight = refApp.current?.clientHeight ? refApp.current?.clientHeight : 0;\n    // const scrollTop = refApp.current?.scrollTop ? refApp.current?.scrollTop : 0;\n    // const scrollHeight = refApp.current?.scrollHeight ? refApp.current?.scrollHeight : 0;\n    // if (scrollHeight - scrollTop - clientHeight <= 5) {  // 距离还有5的时候触发\n    //   handleLoadMore();\n    // }\n  }\n\n  const handleLoadMore = () => {\n    const countDisplaying = imgsDisplayingIndex.length;\n    const imgsTmp: number[] = [];\n\n    for (let i = countDisplaying; i < countDisplaying + countPerMore && i < imgsIndex.length; i++) {\n      imgsTmp.push(i);\n    }\n    setImgsDisplayingIndex(prev => prev.concat(imgsTmp));\n  }\n\n  useEffect(() => {\n    const imgsTmp = [];\n\n    const imgLines = refApp.current?.clientHeight ? Math.ceil(refApp.current?.clientHeight / heightPerImg) : 0;  // 放多少行img\n    for (let i = 0; i < imgLines; i++) {\n      imgsTmp.push(i);\n    }\n\n    setImgsDisplayingIndex(imgsTmp);\n  }, []);\n\n  // 这里是loadMoreButton，也可以使用 下拉自动刷新 的方式\n  const loadMoreButton = imgsDisplayingIndex.length < imgsIndex.length ? (\n    <div>\n      <button onClick={handleLoadMore}>Load More</button>\n    </div>\n  ) : null;\n\n  return (\n    // 触发scroll的前提是app div设置了height以及overflow，app div的children超出了设置的height\n    // scroll是冒泡的，即header div, content div, footer div如果有scroll事件，可以在app div捕捉到\n    <div className='App' onScroll={handleScroll} ref={refApp}>\n      <div className='Header'>Header</div>\n      <div className='Content'>\n        {imgsDisplayingIndex.map(imgIdx => (\n          <div className='img-mock' key={imgIdx}>img #{imgIdx+1}</div>\n        ))}\n        {loadMoreButton}\n      </div>\n      <div className='Footer'>Footer</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}